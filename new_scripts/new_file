#!/bin/bash


LIABVERSION="1.2.0"
LIABRELEASE="2018-05-29"

BL1="[====/ Linux In A Box Setup Script, version $LIABVERSION"
BL2="   //  $LIABRELEASE for CentOS 7.x x86_64"
BL3="  //"
BL4=" //"
KICKSTARTRELEASE="LIAB server v$LIABVERSION"

FTPDIR=/var/ftp/pub

PITD=`mktemp -d`
LOG="${PITD}/postinstall.log"
( echo "${BL1}"; echo "${BL2}"; echo "${BL3}"; echo "${BL4}" ) >> "${LOG}"

showBanner(){
echo ""
echo "${BL1}"; echo "${BL2}"; echo "${BL3}"; echo "${BL4}"
echo ""
}

mustBeRoot(){
[ 0 -ne $UID ] && echo "ERROR: This MUST be run as root!  Try again." && exit 1
}

VERIFYCHECKSUM=1
APPLYUPDATES=1
INSTALLRPMS=1
	# 2015-04-27  VMware Tools isn't _really_ needed, and I'm running into some
	# problems with it making scripts hang.  For now, skipping it.
INSTALLVMTOOLS=0
DONORMALCONFIG=1
DOLDAPCONFIG=1
DOKERBEROSCONFIG=1
SKIPOSCHECK=0

getExternalDHCPInfo(){
INTERFACE=`nmcli -t -f DEVICE,CONNECTION device | grep ":External$" | cut -f 1 -d ":"`

CURLEASE=`ls -1tr /var/lib/NetworkManager/dhclient*-${INTERFACE}.lease | tail -n 1`

[ ! -f "${CURLEASE}" ] && echo "No DHCP lease file for interface ${INTERFACE}, aborting!" && logger "scrape_dhcp_settings: No DHCP lease file" && exit 1
}

getDNSServerInfo(){
DNS1=`grep "option domain-name-servers" "${CURLEASE}" | tail -n 1 | cut -d " " -f 5 | cut -d ";" -f 1 | cut -d "," -f 1`
DNS2=`grep "option domain-name-servers" "${CURLEASE}" | tail -n 1 | cut -d " " -f 5 | cut -d ";" -f 1 | cut -d "," -f 2`
DNS3=`grep "option domain-name-servers" "${CURLEASE}" | tail -n 1 | cut -d " " -f 5 | cut -d ";" -f 1 | cut -d "," -f 3`

DNSSEARCH=`grep "option domain-search" "${CURLEASE}" | tail -n 1 | cut -d " " -f 5- | cut -d ";" -f 1 | sed 's/"//g;s/,//g'`
[ "${DNS3}" == "${DNS2}" ] && DNS3=""
[ "${DNS2}" == "${DNS1}" ] && DNS2=""
}

getNTPServerInfo(){
NTP1=`grep "option ntp-servers" "${CURLEASE}" | tail -n 1 | cut -d " " -f 5 | cut -d ";" -f 1 | cut -d "," -f 1`
NTP2=`grep "option ntp-servers" "${CURLEASE}" | tail -n 1 | cut -d " " -f 5 | cut -d ";" -f 1 | cut -d "," -f 2`
NTP3=`grep "option ntp-servers" "${CURLEASE}" | tail -n 1 | cut -d " " -f 5 | cut -d ";" -f 1 | cut -d "," -f 3`
[ "${NTP3}" == "${NTP2}" ] && NTP3=""
[ "${NTP2}" == "${NTP1}" ] && NTP2=""
}

configureForwarder(){
rm /etc/named.forwarders.new &>/dev/null
echo "# Referenced from /etc/named.conf .  These are the external DNS servers" >> /etc/named.forwarders.new
echo "# we query when we don't have the answer.  They are set by scrape_dhcp_settings.sh ." >> /etc/named.forwarders.new
echo "forwarders {" >> /etc/named.forwarders.new
VALIDDNS=0
[ ! -z "${DNS1}" ] && echo "  ${DNS1};" >> /etc/named.forwarders.new && let VALIDDNS++
[ ! -z "${DNS2}" ] && echo "  ${DNS2};" >> /etc/named.forwarders.new && let VALIDDNS++
[ ! -z "${DNS3}" ] && echo "  ${DNS3};" >> /etc/named.forwarders.new && let VALIDDNS++
echo "};" >> /etc/named.forwarders.new
echo "" >> /etc/named.forwarders.new
diff /etc/named.forwarders.new /etc/named.forwarders &>/dev/null && VALIDDNS=0
[ ${VALIDDNS} -gt 0 ] && chattr -i /etc/named.forwarders && mv /etc/named.forwarders.new /etc/named.forwarders && systemctl restart named.service
rm /etc/named.forwarders.new &>/dev/null
}

configureResolver(){
rm /etc/resolv.conf.new &>/dev/null
VALIDRESOLV=1
echo "# Set by a script and file marked immutable to prevent changes by anything else" >> /etc/resolv.conf.new
echo -n "search example.com. " >> /etc/resolv.conf.new
if [ -z "${DNSSEARCH}" ]; then
  # DHCP didn't provide any DNS search information, using a default set.
  #echo "eerclab.dell.com. okc.amer.dell.com. amer.dell.com. us.dell.com." >> /etc/resolv.conf.new
  # On the other hand, no point in guessing right now.  Let's just terminate
  # that hanging 'echo -n'.
  echo " " >> /etc/resolv.conf.new
else
  # DHCP provided a list of DNS zones we should search when given an unqualified name
  echo "${DNSSEARCH}" >> /etc/resolv.conf.new
fi
if [ "$1" == "phase1_temp" ]; then
  echo "# TEMPORARILY using the DHCP-provided DNS servers directly." >> /etc/resolv.conf.new
  echo "# Once our own DNS daemon is running this will be changed." >> /etc/resolv.conf.new
  if [ "$VALIDDNS" -gt 0 ]; then
    [ ! -z "${DNS1}" ] && echo "nameserver ${DNS1}" >> /etc/resolv.conf.new
    [ ! -z "${DNS2}" ] && echo "nameserver ${DNS2}" >> /etc/resolv.conf.new
    [ ! -z "${DNS3}" ] && echo "nameserver ${DNS3}" >> /etc/resolv.conf.new
  else
    echo "# Or not...  We didn't GET any valid DNS servers from DHCP!" >> /etc/resolv.conf.new
    echo "nameserver 127.0.0.1" >> /etc/resolv.conf.new
  fi
else
  echo "# Since we host our own DNS zone, we cannot use external resolvers" >> /etc/resolv.conf.new
  echo "# here.  They are configured as Forwarders in /etc/named.forwarders ." >> /etc/resolv.conf.new
  echo "nameserver 127.0.0.1" >> /etc/resolv.conf.new
fi
diff /etc/resolv.conf.new /etc/resolv.conf &>/dev/null && VALIDRESOLV=0
[ ${VALIDRESOLV} -gt 0 ] && chattr -i /etc/resolv.conf && mv /etc/resolv.conf.new /etc/resolv.conf && chattr +i /etc/resolv.conf
rm /etc/resolv.conf.new &>/dev/null
}

configureChrony(){
rm /etc/chrony.conf.new &>/dev/null
cp /etc/chrony.conf.base /etc/chrony.conf.new &>/dev/null
VALIDNTP=0
[ ! -z "${NTP1}" ] && echo "server ${NTP1} iburst" >> /etc/chrony.conf.new && let VALIDNTP++
[ ! -z "${NTP2}" ] && echo "server ${NTP2} iburst" >> /etc/chrony.conf.new && let VALIDNTP++
[ ! -z "${NTP3}" ] && echo "server ${NTP3} iburst" >> /etc/chrony.conf.new && let VALIDNTP++
diff /etc/chrony.conf.new /etc/chrony.conf &>/dev/null && VALIDNTP=0
[ ${VALIDNTP} -gt 0 ] && chattr -i /etc/chrony.conf && mv /etc/chrony.conf.new /etc/chrony.conf && chattr +i /etc/chrony.conf && systemctl restart chronyd.service
rm /etc/chrony.conf.new &>/dev/null
}

logResults(){
logger "scrape_dhcp_settings: DNS values ${DNS1} ${DNS2} ${DNS3}; NTP values ${NTP1} ${NTP2} ${NTP3}; DNSSEARCH ${DNSSEARCH}"
}

#ln -s $(ls VMwareTools-*.tar.gz | sort -V | tail -n 1) VMwareTools.tar.gz | tee -a "${LOG}"

getNICInfo(){
nmcli -t -f DEVICE,TYPE,CONNECTION,CON-UUID device | grep "ethernet" > ${PITD}/NICs
NUM_OF_NICS=`wc -l < ${PITD}/NICs`
let NUM_OF_NICS+=0
if [ 2 -gt ${NUM_OF_NICS} ]; then
  echo "ERROR: There are not enough Ethernet NICs available.  Ensure you have 2 and" | tee -a "${LOG}"
  echo "       try again." | tee -a "${LOG}"
  exit 1
fi
if [ 2 -lt ${NUM_OF_NICS} ]; then
  echo "I only need two Ethernet NICs, but you have ${NUM_OF_NICS}.  That's OK," | tee -a "${LOG}"
  echo "I'll just use the first two.  You can do what you want with the rest." | tee -a "${LOG}"
fi
}

getNICOrder(){
NIC1NAME=`head -n 1 < ${PITD}/NICs | cut -d ":" -f 1`
NIC1CON=`head -n 1 < ${PITD}/NICs | cut -d ":" -f 3`
NIC1CONUUID=`head -n 1 < ${PITD}/NICs | cut -d ":" -f 4`
NIC2NAME=`head -n 2 < ${PITD}/NICs | tail -n 1 | cut -d ":" -f 1`
NIC2CON=`head -n 2 < ${PITD}/NICs | tail -n 1 | cut -d ":" -f 3`
NIC2CONUUID=`head -n 2 < ${PITD}/NICs | tail -n 1 | cut -d ":" -f 4`
}


doWeirdNICVoodoo(){


if [ "${NIC1CON}" != "External" ]; then
  echo "nmcli device disconnect ${NIC1NAME}" &>>"${LOG}"
  nmcli device disconnect ${NIC1NAME} &>>"${LOG}"
  if [ "${NIC1CONUUID}" != "--" ]; then
    # If the connection name/UUID is '--' then it was blank/not set.
	echo "nmcli connection delete uuid ${NIC1CONUUID}" &>>"${LOG}"
    nmcli connection delete uuid ${NIC1CONUUID} &>>"${LOG}"
  fi
  # "DHCP" is implied when you don't specify an IP address.  In fact I see no way
  # to explicitly state DHCP as an option...?
  echo "nmcli connection delete id ${NIC1NAME}" &>>"${LOG}"
  nmcli connection delete id ${NIC1NAME} &>>"${LOG}"
  echo "nmcli connection add type ethernet con-name External ifname ${NIC1NAME}" &>>"${LOG}"
  nmcli connection add type ethernet con-name External ifname ${NIC1NAME} &>>"${LOG}"
  echo "nmcli connection modify External connection.zone \"external\" ipv4.ignore-auto-dns \"true\" ipv4.dns \"127.0.0.1\" ipv4.dns-search \"example.com\"" &>>"${LOG}"
  nmcli connection modify External connection.zone "external" ipv4.ignore-auto-dns "true" ipv4.dns "127.0.0.1" ipv4.dns-search "example.com" &>>"${LOG}"
  # To ensure that our just-modified settings for DNS are used, briefly re-drop the connection
  echo "nmcli device disconnect ${NIC1NAME}" &>>"${LOG}"
  nmcli device disconnect ${NIC1NAME} &>>"${LOG}"
  sleep 2
  echo "nmcli device connect ${NIC1NAME}" &>>"${LOG}"
  nmcli device connect ${NIC1NAME} &>>"${LOG}"
  # And give it time to find an address.
  sleep 2
  echo "NIC1 (${NIC1NAME}) configured for DHCP operation.  Current address (if any):" | tee -a "${LOG}"
else
  echo "The first NIC (${NIC1NAME}) looks like it was already configured.  To" | tee -a "${LOG}"
  echo "avoid changing anything that you've customized, I'll leave it alone." | tee -a "${LOG}"
  echo "Current address (if any):" | tee -a "${LOG}"
fi
ip address show ${NIC1NAME} | grep "inet" | cut -d " " -f 1-6 | tee -a "${LOG}"


echo "nmcli device disconnect ${NIC2NAME}" &>>"${LOG}"
nmcli device disconnect ${NIC2NAME} &>>"${LOG}"
if [ "${NIC2CONUUID}" != "--" ]; then
  # If the connection name/UUID is '--' then it was blank/not set.
  echo "nmcli connection delete uuid ${NIC2CONUUID}" &>>"${LOG}"
  nmcli connection delete uuid ${NIC2CONUUID} &>>"${LOG}"
fi
echo "nmcli connection delete id ${NIC2NAME}" &>>"${LOG}"
nmcli connection delete id ${NIC2NAME} &>>"${LOG}"
echo "nmcli connection delete id Internal" &>>"${LOG}"
nmcli connection delete id Internal &>>"${LOG}"
echo "nmcli connection add type ethernet con-name Internal ifname ${NIC2NAME} ip4 172.26.0.1/24 ip6 fd07:de11:2015:0324::1/64" &>>"${LOG}"
nmcli connection add type ethernet con-name Internal ifname ${NIC2NAME} ip4 172.26.0.1/24 ip6 fd07:de11:2015:0324::1/64 &>>"${LOG}"
echo "nmcli connection modify Internal connection.zone \"internal\" ipv4.dns \"127.0.0.1\" ipv4.dns-search \"example.com\"" &>>"${LOG}"
nmcli connection modify Internal connection.zone "internal" ipv4.dns "127.0.0.1" ipv4.dns-search "example.com" &>>"${LOG}"
echo "nmcli device disconnect ${NIC2NAME}" &>>"${LOG}"
nmcli device disconnect ${NIC2NAME} &>>"${LOG}"
sleep 2
echo "nmcli device connect ${NIC2NAME}" &>>"${LOG}"
nmcli device connect ${NIC2NAME} &>>"${LOG}"
sleep 2
echo "NIC2 (${NIC2NAME}) configured with static addresses"  | tee -a "${LOG}"
ip address show ${NIC2NAME} | grep "inet" | cut -d " " -f 1-6 | tee -a "${LOG}"
echo ""  | tee -a "${LOG}"
ip address show  &>>"${PITD}/ip_a_s.txt"
nmcli connection &>>"${PITD}/nmcli_con.txt"
nmcli device &>>"${PITD}/nmcli_dev.txt"
ethtool ${NIC1NAME} &>>"${PITD}/ethtool_1.txt"
ethtool ${NIC2NAME} &>>"${PITD}/ethtool_2.txt"

/usr/local/sbin/scrape_dhcp_settings.sh phase1_temp &>/dev/null
}

doHostnameStuff(){
[ ! -f /etc/hosts_orig ] && cp -a /etc/hosts /etc/hosts_orig || cp -a /etc/hosts_orig /etc/hosts
echo "172.26.0.1  server1.example.com  server1" >> /etc/hosts
echo "server1.example.com" > /etc/hostname
hostname server1
}

doCentralTime(){
( cd /etc && rm localtime && ln -s ../usr/share/zoneinfo/US/Central )
}

doPackageInstall(){
if [ ${INSTALLRPMS} -eq 1 ]; then
  echo "Package installation in progress..." | tee -a "${LOG}"
  yum -y install "@Console Internet Tools" "@System Management" "@System Administration Tools" pax dmidecode oddjob sgpio \
    certmonger pam_krb5 krb5-server krb5-workstation perl-DBD-SQLite httpd vsftpd nfs-utils nfs4-acl-tools dhcp tftp tftp-server \
    bind-chroot bind-utils  createrepo openldap openldap-servers openldap-devel openldap-clients ypserv migrationtools \
    selinux-policy-targeted policycoreutils-python syslinux iscsi-initiator-utils ftp lftp samba-client samba* unzip zip lsof \
    mlocate targetd targetcli tcpdump pykickstart links chrony net-tools patch rng-tools open-vm-tools screen rsync \
    policycoreutils-devel sos xinetd vim bash-completion &>"${PITD}/yum_install.txt"
  echo >>"${PITD}/yum_install.txt"
#  yum -y install ${FTPDIR}/materials/sl-*.rpm &>>"${PITD}/yum_install.txt"
  # scsi-target-utils not in the normal RHEL7 repo, it is deprecated.  You can still get it from EPEL though.
  # It was replaced by LIO, aka targetd & targetcli.
  #
  # net-tools is obsolete and deprecated, but contains "ifconfig" and is needed
  # for either open-vm-tools or VMware Tools to work properly.  According to
  # https://bugzilla.redhat.com/show_bug.cgi?id=1151644 this should be fixed
  # (for open-vm-tools) in the next release.
  echo "...complete." | tee -a "${LOG}"
else
  echo "Package installation skipped by argument.  " | tee -a "${LOG}"
  sleep 5
fi
echo ""
}

doVMToolsStuff(){
systemctl status vmtoolsd.service &>> "${LOG}"
systemctl start vmtoolsd.service &>> "${LOG}"

if dmidecode | grep -q "Product Name: VMware Virtual Platform"; then
  if [ ${INSTALLVMTOOLS} -eq 1 ]; then
    echo "Decompressing VMware Tools installer package." | tee -a "${LOG}"
    pushd /tmp &>/dev/null
    [ -d vmware-tools-distrib ] && rm vmware-tools-distrib -rf &>/dev/null
    tar -xzf ${FTPDIR}/VMwareTools.tar.gz
    if [ $? -eq 0 ]; then
      # Decompressed without errors, good
      cd vmware-tools-distrib
      # Set this variable later if VMware Tools are already installed, else leave it junky
      VMTVER="bogusbogusbogusNOTinstalled"
      which vmware-toolbox-cmd &>/dev/null && VMTVER=`vmware-toolbox-cmd -v | cut -d " " -f 1`
      if grep -iRq "${VMTVER}" * &>/dev/null ; then
        echo "VMware Tools already installed and version matches, leaving as-is." | tee -a "${LOG}"
      else
        # Default to 'newer', we will install the Packaged VMware Tools.
        PVMTIS=newer
        # What is the Packaged VMware Tools Version?  Hope they don't change this variable  name.
        PVMTVER=`grep "\\$buildNr =" vmware-install.pl | cut -d "'" -f 2 | cut -d " " -f 1`
	    # Split these up to Major, Minor, and Revision numbers...
	    PVMTVERMAJ=`echo "${PVMTVER}" | cut -d "." -f 1`
	    PVMTVERMIN=`echo "${PVMTVER}" | cut -d "." -f 2`
	    PVMTVERREV=`echo "${PVMTVER}" | cut -d "." -f 3`
	    VMTVERMAJ=`echo "${VMTVER}" | cut -d "." -f 1`
	    VMTVERMIN=`echo "${VMTVER}" | cut -d "." -f 2`
	    VMTVERREV=`echo "${VMTVER}" | cut -d "." -f 3`
	    # ...adding zero ensures we have a numeric result even with an alpha input...
	    let PVMTVERMAJ+=0
	    let PVMTVERMIN+=0
	    let PVMTVERREV+=0
	    let VMTVERMAJ+=0
	    let VMTVERMIN+=0
	    let VMTVERREV+=0
	    # ...and now compare them.
	    [ ${PVMTVERMAJ} -lt ${VMTVERMAJ} ] && PVMTIS=older
	    [ ${PVMTVERMIN} -lt ${VMTVERMIN} ] && PVMTIS=older
	    [ ${PVMTVERREV} -lt ${VMTVERREV} ] && PVMTIS=older
	    # Sanity check, in case the Package Version seems to be flat-out wrong, just install it.
	    # This probably indicates that they changed something and our version check is getting trash.
	    [ 9 -gt ${PVMTVERMAJ} ] && PVMTIS=newer
	    echo "VMTVER=${VMTVER}" >>"${LOG}"
	    echo "PVMTVER=${PVMTVER}" >>"${LOG}"
	    echo "PVMTIS=${PVMTIS}" >>"${LOG}"
	    if [ "older" == "$PVMTIS" ]; then
  	    echo "The installed VMware Tools is newer than the package(s) I have access to," | tee -a "${LOG}"
	      echo "so skipping installation." | tee -a "${LOG}"
	    else
          echo "Installing VMware Tools." | tee -a "${LOG}"
          ./vmware-install.pl --default &>>"${LOG}"
          # Just in case some background process needs to let go first...
          sleep 2
	    fi
	  fi # Version did not match installed
    else
      echo "CAUTION: VMware Tools was needed but failed to decompress properly." | tee -a "${LOG}"
    fi # Checking that the Tools decompressed OK
    rm vmware-tools-distrib -rf &>/dev/null
    popd &>/dev/null
  else
    echo "Skipping VMware Tools due to command argument." | tee -a "${LOG}"
  fi
else
  echo "VMware Tools is not needed on this system, skipping." | tee -a "${LOG}"
fi
}

doDebugHalt(){
[ -f /DEBUG_HALT1 ] && echo "Halting as ordered, DEBUG_HALT1"  | tee -a "${LOG}" && exit 0
}

setKSRelease(){
cat /etc/kickstart-release >>/etc/issue
}

startRNGD(){
systemctl enable rngd.service &>>"${LOG}"
systemctl start rngd.service  &>>"${LOG}"
}

doLabRouteTesting(){
echo "   Internal lab routes" | tee -a "${LOG}"
for i in `seq 1 9`; do
  echo "172.26.$i.0/24 via 172.26.0.20$i dev ${NIC2NAME}" >>/etc/sysconfig/network-scripts/route-Internal
done
for i in `seq 10 ${NUMOFWS}`; do
  echo "172.26.$i.0/24 via 172.26.0.2$i dev ${NIC2NAME}" >>/etc/sysconfig/network-scripts/route-Internal
done
}

startWebServer(){
echo "   httpd / Apache" | tee -a "${LOG}"
cd /var/www/html
ln -s ${FTPDIR}
systemctl enable httpd.service &>>"${LOG}"
systemctl start httpd.service &>>"${LOG}"
}

startFTPServer(){
echo "   vsftpd" | tee -a "${LOG}"
systemctl enable vsftpd.service &>>"${LOG}"
systemctl start vsftpd.service &>>"${LOG}"
}

configureDHCPServer(){
echo "   dhcpd" | tee -a "${LOG}"
sed -i.bak -e s/DHCPDARGS=/DHCPDARGS=${NIC2NAME}/ /etc/sysconfig/dhcpd
cat >/etc/dhcp/dhcpd.conf <<EOF
authoritative;
default-lease-time 14400;
max-lease-time 14400;
lease-file-name "/var/lib/dhcpd/dhcpd.leases";
ddns-update-style none;
option domain-name "example.com";
option subnet-mask 255.255.255.0;
option domain-name-servers 172.26.0.1;
option routers 172.26.0.1;

allow booting;
allow bootp;
option magic      code 208 = string;
option configfile code 209 = text;
option pathprefix code 210 = text;
option reboottime code 211 = unsigned integer 32;
class "pxeclients" {
   match if substring(option vendor-class-identifier, 0, 9) = "PXEClient";
   next-server 172.26.0.1;
   filename "pxelinux.0";
   # Reboot timeout after TFTP failure in seconds, 0 ~= forever
   option reboottime 30;
   # Magic was required for PXELINUX prior to v3.55
   option magic f1:00:74:7e;
   if exists dhcp-parameter-request-list {
     option dhcp-parameter-request-list = concat(option dhcp-parameter-request-list, d0, d1, d2, d3);
   }
}

subnet 172.26.0.0 netmask 255.255.255.0 {
        range 172.26.0.101 172.26.0.151;
}

host station1 {
        option host-name "station1";
        fixed-address 172.26.0.201;
        hardware ethernet 00:50:56:bb:75:ab;
}
host station2 {
        option host-name "station2";
        fixed-address 172.26.0.202;
        hardware ethernet 00:50:56:bb:55:3d;
}
EOF
systemctl enable dhcpd.service &>>"${LOG}"
systemctl start dhcpd.service &>>"${LOG}"
}

configureDNSServer(){
echo "   named / DNS" | tee -a "${LOG}"
cat >/etc/named.conf <<EOF
options {
        directory "/var/named";
        # Forwarders are now set by scrape_dhcp_settings.sh
        #forwarders { 8.8.8.8; 8.8.4.4; };
        include "/etc/named.forwarders";
        listen-on { 127.0.0.1; 172.26.0/24; };
};
zone "example.com" IN {
        type master;
        file "db.example.com";
        allow-update { none; };
};
zone "0.26.172.in-addr.arpa" IN {
        type master;
        file "db.0.26.172.in-addr.arpa";
        allow-update { none; };
};
zone "4.2.3.0.5.1.0.2.1.1.e.d.7.0.d.f.ip6.arpa" IN {
		type master;
		file "db.4.2.3.0.5.1.0.2.1.1.e.d.7.0.d.f.ip6.arpa";
		allow-update {none; };
};
EOF
cat >/var/named/db.0.26.172.in-addr.arpa <<EOF
\$TTL 86400
@       IN      SOA     server1.example.com.    root.server1.example.com.       (
                                                20080915        ; Serial
                                                28800                   ; Refresh
                                                14400                   ; Retry
                                                3600000                 ; Expire
                                                86400 )                 ; Minimum


                        IN NS   server1.example.com.

1                       IN PTR  server1.example.com.
\$GENERATE 1-9  20\$    IN PTR  station\$.example.com.
\$GENERATE 10-${NUMOFWS}  2\$   IN PTR  station\$.example.com.

\$GENERATE 1-9   10\$     IN PTR  dhcp\$.example.com.
\$GENERATE 10-${NUMOFWS} 1\$      IN PTR  dhcp\$.example.com.
EOF
cat >/var/named/db.4.2.3.0.5.1.0.2.1.1.e.d.7.0.d.f.ip6.arpa <<EOF
;
; fd07:de11:2015:324::/64
;
; Zone file built with the IPv6 Reverse DNS zone builder
; http://rdns6.com/
;
\$TTL 1h ; Default TTL
\$ORIGIN 4.2.3.0.5.1.0.2.1.1.e.d.7.0.d.f.ip6.arpa.
@   IN   SOA   server1.example.com.   root.server1.example.com.   (
    2015032401 ; serial
    1h         ; slave refresh interval
    15m        ; slave retry interval
    1w         ; slave copy expire time
    1h         ; NXDOMAIN cache time
    )

;
; domain name servers
;
@ IN NS server1.example.com.


; IPv6 PTR entries
1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4.2.3.0.5.1.0.2.1.1.e.d.7.0.d.f.ip6.arpa.    IN    PTR    server1.example.com.

EOF
cat >/var/named/db.example.com <<EOF
\$TTL 86400
@       1D IN SOA       server1.example.com.       root.server1.example.com.    (
                                20080916                ; serial (yyyymmdd)
                                3H                      ; refresh
                                15M                     ; retry
                                1W                      ; expiry
                                1D )                    ; minimum

                IN      NS      server1.example.com.

; station1      IN A    172.26.0.101
server1         IN A    172.26.0.1
server1         IN AAAA FD07:DE11:2015:0324::1
\$GENERATE 1-9 station\$  IN A    172.26.0.20\$
\$GENERATE 10-${NUMOFWS} station\$  IN A    172.26.0.2\$

\$GENERATE 1-9 dhcp\$    IN A    172.26.0.10\$
\$GENERATE 10-${NUMOFWS} dhcp\$  IN A    172.26.0.1\$
EOF
for i in `seq 1 9`; do
cat >/var/named/db.station$i.com <<EOF
\$TTL 86400
@       1D IN SOA       server1.example.com.       root.server1.example.com.    (
                                20080921                ; serial (yyyymmdd)
                                3H                      ; refresh
                                15M                     ; retry
                                1W                      ; expiry
                                1D )                    ; minimum

                IN      NS      station$i.com.
                IN      NS      station$i.example.com.
                IN      NS      server1.example.com.

                IN MX 10    station$i.com
                IN A    172.26.0.20$i
www             IN A    172.26.0.20$i
ns              IN A    172.26.0.20$i
EOF
done

for i in `seq 10 ${NUMOFWS}`; do
cat >/var/named/db.station$i.com <<EOF
\$TTL 86400
@       1D IN SOA       server1.example.com.       root.server1.example.com.    (
                                20080921                ; serial (yyyymmdd)
                                3H                      ; refresh
                                15M                     ; retry
                                1W                      ; expiry
                                1D )                    ; minimum

                IN      NS      station$i.com.
                IN      NS      station$i.example.com.
                IN      NS      server1.example.com.

                IN A    172.26.0.2$i
                IN MX 10 172.26.0.2$i
www             IN A    172.26.0.2$i
ns              IN A    172.26.0.2$i
EOF
done


for i in `seq 1 9`; do
cat >>/etc/named.conf <<EOF
zone "station$i.com" IN {
        type master;
        file "db.station$i.com";
        allow-update { none; };
        allow-transfer { 172.26.0.20$i; };
};
EOF
done

for i in `seq 10 ${NUMOFWS}`; do
cat >>/etc/named.conf <<EOF
zone "station$i.com" IN {
        type master;
        file "db.station$i.com";
        allow-update { none; };
        allow-transfer { 172.26.0.2$i; };
};
EOF
done

if [ ! -f /etc/named.forwarders ]; then
  cat >>/etc/named.forwarders <<EOF
forwarders { 
  8.8.8.8;
  8.8.4.4;
};
EOF
fi

systemctl enable named.service &>>"${LOG}"
systemctl start named.service &>>"${LOG}"
}

configurePXEServer(){
echo "   tftpd" | tee -a "${LOG}"
sed -r -i.bak -e 's/(disable\s*=\s*)(yes)/\1no/'  -e 's/(server_args\s*)(=\s*-s)/\1= -v -s/' /etc/xinetd.d/tftp
echo "Reloading xinetd.service"  &>>"${LOG}"
systemctl reload xinetd.service  &>>"${LOG}"
sleep 2
echo "Checking xinetd.service and starting if still needed"  &>>"${LOG}"
( systemctl is-active xinetd.service || systemctl start xinetd.service ) &>>"${LOG}"

mkdir -p /var/lib/tftpboot/pxelinux.cfg &>>"${LOG}"

PXEDEFAULT=`echo "${ISOMOUNTDIRREL}" | cut -d "/" -f 1`

cat >/var/lib/tftpboot/pxelinux.cfg/default <<EOF
default menu.c32
prompt 0
timeout 300
ONTIMEOUT local
menu title #### PXE Boot Menu ####
 
label Q
  menu label ^Q) Quit PXE
  localboot 0

EOF

PXEMENUNUM=0
for full_path in `find ${FTPDIR} -name pxeboot -type d` ; do
	# Note that this loop is checking for the name of the subdirectory under 'pub'.
	# It is expected that each RHEL version will be in a different subdir of 'pub' directly
	# rather than something like 'pub/RHEL/7.0', 'pub/RHEL/7.1', etc.
	#echo $full_path
	# comp_name = extract the 5th field, delimiter /
	export comp_name=`echo $full_path|cut -d'/' -f5`
	mkdir -p /var/lib/tftpboot/$comp_name
	cp $full_path/* /var/lib/tftpboot/$comp_name/ &>>"${LOG}"

	let PXEMENUNUM++
	cat >>/var/lib/tftpboot/pxelinux.cfg/default <<EOF
label ${PXEMENUNUM}
  menu label ^${PXEMENUNUM}) ${comp_name}_manual_install
  kernel $comp_name/vmlinuz
  append initrd=${comp_name}/initrd.img root=live:http://server1.example.com/pub/${comp_name}/dvd/LiveOS/squashfs.img repo=http://server1.example.com/pub/${comp_name}/dvd/

EOF
	let PXEMENUNUM++
	cat >>/var/lib/tftpboot/pxelinux.cfg/default <<EOF
label ${PXEMENUNUM}
  menu label ^${PXEMENUNUM}) ${comp_name}_kickstart_install
  kernel $comp_name/vmlinuz
  append initrd=${comp_name}/initrd.img root=live:http://server1.example.com/pub/${comp_name}/dvd/LiveOS/squashfs.img repo=http://server1.example.com/pub/${comp_name}/dvd/ noipv6 ks=http://server1.example.com/pub/station_ks.cfg

EOF
done

cp -a /usr/share/syslinux/pxelinux.0 /usr/share/syslinux/menu.c32 /var/lib/tftpboot/ &>>"${LOG}"
restorecon -R /var/lib/tftpboot/ &>>"${LOG}"
}

configureNTPServer(){
echo "   NTP / Chrony" | tee -a "${LOG}"
cat >/etc/chrony.conf.base <<EOF

stratumweight 0
driftfile /var/lib/chrony/drift
rtcsync
makestep 10 3
allow 172.26.0.0/24
allow fd07:de11:2015:0324::/64
bindcmdaddress 127.0.0.1
bindcmdaddress ::1
local stratum 10
keyfile /etc/chrony.keys
commandkey 1
generatecommandkey
noclientlog
logchange 0.5
logdir /var/log/chrony

EOF
chattr +i /etc/chrony.conf.base
cp /etc/chrony.conf.base /etc/chrony.conf
if [ ${DETECTEDOS} -lt 10 ]; then
  NTPPOOL="rhel."
elif [ ${DETECTEDOS} -lt 20 ]; then
  NTPPOOL="centos."
else
  NTPPOOL=""
fi
cat >>/etc/chrony.conf <<EOF
server ntp1.us.dell.com iburst
server ntp2.us.dell.com iburst
server 0.${NTPPOOL}pool.ntp.org iburst
server 1.${NTPPOOL}pool.ntp.org iburst
server 2.${NTPPOOL}pool.ntp.org iburst
server 3.${NTPPOOL}pool.ntp.org iburst

EOF
chattr +i /etc/chrony.conf

systemctl enable chronyd.service &>>"${LOG}"
systemctl start  chronyd.service &>>"${LOG}"
}

configureLabUsers(){
echo "   Lab Users" | tee -a "${LOG}"
groupadd smbuser &>>"${LOG}"

mkdir /home/server1 &>>"${LOG}"
for i in `seq -w 1 ${NUMOFWS}`; do
  # password flag
  # This block is not creating a group per user.  For now we don't care.
  useradd -g users -u 20$i -d /home/server1/guest$i guest$i  &>>"${LOG}"
  echo "P@ssw0rd" | passwd --stdin guest$i  &>>"${LOG}"
done
}

configureCerts(){
echo "   Local CA" | tee -a "${LOG}"
(umask 077;openssl genrsa -passout pass:cacertpass -out /etc/pki/CA/private/cakey.pem -des3 2048)  &>>"${LOG}"
openssl req -new -x509 -passin pass:cacertpass -key /etc/pki/CA/private/cakey.pem -days 3650 >/etc/pki/CA/cacert.pem <<EOF  2>>"${LOG}"
US
Texas
Round Rock
Dell

server1.example.com
root@server1.example.com
EOF

mkdir -p ${FTPDIR}/materials
rm -f ${FTPDIR}/materials/cacert.pem
cp /etc/pki/CA/cacert.pem ${FTPDIR}/materials/cacert.pem

touch /etc/pki/CA/index.txt
echo "01" > /etc/pki/CA/serial
touch /etc/pki/CA/cacert.srl
echo "01" > /etc/pki/CA/cacert.srl

cp /etc/pki/CA/cacert.pem /etc/openldap/certs/
ln -s /etc/openldap/certs/cacert.pem /etc/openldap/certs/`openssl x509 -hash -noout -in /etc/openldap/certs/cacert.pem`.0 &>>"${LOG}"


mkdir -p ${FTPDIR}/materials/certs &>>"${LOG}"

for i in `seq 1 ${NUMOFWS}`; do
	openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout "${FTPDIR}/materials/certs/geek${i}.key"  -out "${FTPDIR}/materials/certs/geek${i}.crt" <<EOF &>>"${LOG}"
US
Texas
Round Rock
Dell

geek${i}.example.com
root@station${i}.example.com
EOF
	openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout "${FTPDIR}/materials/certs/nerd${i}.key"  -out "${FTPDIR}/materials/certs/nerd${i}.crt" <<EOF &>>"${LOG}"
US
Texas
Round Rock
Dell

nerd${i}.example.com
root@station${i}.example.com
EOF
	openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout "${FTPDIR}/materials/certs/dweeb${i}.key" -out "${FTPDIR}/materials/certs/dweeb${i}.crt" <<EOF &>>"${LOG}"
US
Texas
Round Rock
Dell

dweeb${i}.example.com
root@station${i}.example.com
EOF
done

echo "   LDAP" | tee -a "${LOG}"

openssl req -new -x509 -nodes -out /etc/openldap/certs/cert.pem -keyout /etc/openldap/certs/priv.pem -days 365 <<EOF &>>"${LOG}"
US
Texas
Round Rock
Dell
Linux In A Box lab
server1.example.com
root@server1.example.com
EOF

}

configureLDAPServer(){
if [ ${DOLDAPCONFIG} -eq 1 ]; then  # Not indenting the block, search for "#End of DOLDAPCONFIG"

echo "Starting the new LDAP stuff" &>>"${LOG}"

chown ldap:ldap /etc/openldap/certs/* &>>"${LOG}"
chmod 600 /etc/openldap/certs/priv.pem &>>"${LOG}"
(cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG; slaptest) &>>"${LOG}"
chown ldap:ldap /var/lib/ldap/* &>>"${LOG}"
systemctl enable slapd.service &>>"${LOG}"
systemctl start slapd.service &>>"${LOG}"
ldapadd -Y EXTERNAL -H ldapi:/// -D "cn=config" -f /etc/openldap/schema/cosine.ldif &>>"${LOG}"
ldapadd -Y EXTERNAL -H ldapi:/// -D "cn=config" -f /etc/openldap/schema/nis.ldif &>>"${LOG}"
cp /etc/openldap/certs/cert.pem /var/www/html/pub/materials/ &>>"${LOG}"


cat <<EOF >/etc/openldap/changes.ldif 2>>"${LOG}"
dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcSuffix
olcSuffix: dc=example,dc=com

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootDN
olcRootDN: cn=Manager,dc=example,dc=com

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootPW
olcRootPW: {SSHA}5ya72uj/eu56gNRYC1l/tW2XJBsO7/RJ

dn: cn=config
changetype: modify
replace: olcTLSCertificateFile
olcTLSCertificateFile: /etc/openldap/certs/cert.pem

dn: cn=config
changetype: modify
replace: olcTLSCertificateKeyFile
olcTLSCertificateKeyFile: /etc/openldap/certs/priv.pem

dn: cn=config
changetype: modify
replace: olcLogLevel
olcLogLevel: -1

dn: olcDatabase={1}monitor,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" read by dn.base="cn=Manager,dc=example,dc=com" read by * none
EOF

ldapmodify -Y EXTERNAL -H ldapi:/// -f /etc/openldap/changes.ldif &>>"${LOG}"

cat <<EOF >/etc/openldap/base.ldif 2>>"${LOG}"
dn: dc=example,dc=com
dc: example
objectClass: top
objectClass: domain

dn: ou=People,dc=example,dc=com
ou: People
objectClass: top
objectClass: organizationalUnit

dn: ou=Group,dc=example,dc=com
ou: Group
objectClass: top
objectClass: organizationalUnit
EOF

ldapadd -x -w redhat -D cn=Manager,dc=example,dc=com -f /etc/openldap/base.ldif &>>"${LOG}"

pushd /usr/share/migrationtools &>>"${LOG}"
sed -e s/padl/example/ -e s/ou=Group/ou=Groups/ migrate_common.ph -i.bak  &>>"${LOG}"

grep "guest" /etc/passwd > passwd 2>>"${LOG}"
./migrate_passwd.pl passwd users.ldif &>>"${LOG}"
ldapadd -x -w redhat -D cn=Manager,dc=example,dc=com -f users.ldif &>>"${LOG}"
grep "guest" /etc/group > group 2>>"${LOG}"
./migrate_group.pl group groups.ldif &>>"${LOG}"
ldapadd -x -w redhat -D cn=Manager,dc=example,dc=com -f groups.ldif &>>"${LOG}"
popd &>>"${LOG}"

echo "Testing the new LDAP stuff" &>>"${LOG}"
ldapsearch -x cn=guest01 -b dc=example,dc=com &>>"${LOG}"

echo "Finished the new LDAP stuff" &>>"${LOG}"

else #DOLDAPCONFIG
  echo "LDAP configuration skipped by command argument." | tee -a "${LOG}"
fi #End of DOLDAPCONFIG main block
}

configureKRB5(){
if [ ${DOKERBEROSCONFIG} -eq 1 ]; then # Not indenting the block, search for "#End of DOKERBEROSCONFIG"
echo "   Kerberos" | tee -a "${LOG}"


cat <<EOF | patch -b -d /var/kerberos/krb5kdc &>>"${LOG}"
--- kdc.conf_orig       2014-03-11 19:22:53.000000000 +0000
+++ kdc.conf    2015-07-01 02:03:50.212004811 +0000
@@ -5,5 +5,6 @@
 [realms]
  EXAMPLE.COM = {
-  #master_key_type = aes256-cts
+  master_key_type = aes256-cts
+  default_principal_flags = +preauth
   acl_file = /var/kerberos/krb5kdc/kadm5.acl
   dict_file = /usr/share/dict/words
EOF

[ ! -f /etc/krb5.conf_orig ] && cp -a /etc/krb5.conf /etc/krb5.conf_orig
cat <<EOF >/etc/krb5.conf 2>>"${LOG}"
[logging]
 default = FILE:/var/log/krb5libs.log
 kdc = FILE:/var/log/krb5kdc.log
 admin_server = FILE:/var/log/kadmind.log

[libdefaults]
 dns_lookup_realm = false
 ticket_lifetime = 24h
 renew_lifetime = 7d
 forwardable = true
 rdns = false
 default_realm = EXAMPLE.COM
 default_ccache_name = KEYRING:persistent:%{uid}

 default_realm = EXAMPLE.COM
 dns_lookup_kdc = false
[realms]
 EXAMPLE.COM = {
  kdc = server1.example.com
  admin_server = server1.example.com
 }

[domain_realm]
 .example.com = EXAMPLE.COM
 example.com = EXAMPLE.COM
EOF



echo "Kernel entropy pool value before: `cat /proc/sys/kernel/random/entropy_avail`" &>>"${LOG}"
echo -e "redhat\nredhat" | kdb5_util create -s -r EXAMPLE.COM &>>"${LOG}"
echo "Kernel entropy pool value after: `cat /proc/sys/kernel/random/entropy_avail`" &>>"${LOG}"

systemctl enable krb5kdc &>>"${LOG}"
systemctl enable kadmin &>>"${LOG}"
systemctl start krb5kdc &>>"${LOG}"
systemctl start kadmin &>>"${LOG}"


KADMINCMDS="${PITD}/kadmin.local_cmds"
cat <<EOF > "${KADMINCMDS}"
addprinc root/admin
redhat
redhat

addprinc -randkey host/server1.example.com
addprinc -randkey nfs/server1.example.com
EOF
for i in `seq 1 ${NUMOFWS}`; do
  cat <<EOF >> "${KADMINCMDS}"
addprinc -randkey host/station${i}.example.com
addprinc -randkey nfs/station${i}.example.com
EOF
done
cat <<EOF >> "${KADMINCMDS}"

ktadd host/server1.example.com
ktadd nfs/server1.example.com
EOF
for i in `seq 1 ${NUMOFWS}`; do
  cat <<EOF >> "${KADMINCMDS}"
ktadd host/station${i}.example.com
ktadd nfs/station${i}.example.com
EOF
done
cat <<EOF >> "${KADMINCMDS}"

ktadd -k /var/kerberos/krb5kdc/kadm5.keytab kadmin/admin kadmin/changepw
quit
EOF

kadmin.local <"${KADMINCMDS}" &>>"${LOG}"

cp /etc/krb5.keytab ${FTPDIR}/materials/krb5.keytab
chmod a+r ${FTPDIR}/materials/krb5.keytab &>>"${LOG}"

for NUM in `seq -w -s " " 1 ${NUMOFWS}`; do
  echo -e "redhat\nredhat" | kadmin.local -q "addprinc guest${NUM}" &>>"${LOG}"
done

cat <<EOF | patch -b -d /etc/ssh &>>"${LOG}"
--- ssh_config_orig     2014-03-19 20:50:07.000000000 +0000
+++ ssh_config  2015-07-01 03:16:39.423873305 +0000
@@ -51,4 +51,5 @@
 Host *
        GSSAPIAuthentication yes
+       GSSAPIDelegateCredentials yes
 # If this option is set to yes then remote X11 clients will have full access
 # to the original X11 display. As virtually no X11 client supports the untrusted
EOF

cat <<EOF >/etc/firewalld/services/kerberos.xml 2>>"${LOG}"
<?xml version="1.0" encoding="utf-8"?>
<service>
  <short>Kerberos</short>
  <description>Kerberos network authentication protocol server</description>
  <port protocol="tcp" port="88"/>
  <port protocol="udp" port="88"/>
  <port protocol="tcp" port="749"/>
</service>
EOF

authconfig --enablekrb5 --update &>>"${LOG}"

cat <<EOF | patch -b -d /etc &>>"${LOG}"
--- idmapd.conf_orig	2014-01-26 12:33:44.000000000 +0000
+++ idmapd.conf	2015-08-13 20:33:47.151534977 +0000
@@ -3,5 +3,5 @@
 # The following should be set to the local NFSv4 domain name
 # The default is the host's DNS domain name.
-#Domain = local.domain.edu
+Domain = example.com
 
 # The following is a comma-separated list of Kerberos realm
@@ -18,6 +18,6 @@
 [Mapping]
 
-#Nobody-User = nobody
-#Nobody-Group = nobody
+Nobody-User = nfsnobody
+Nobody-Group = nfsnobody
 
 [Translation]
@@ -29,5 +29,5 @@
 # New methods may be defined and inserted in the list.
 # The default is "nsswitch".
-#Method = nsswitch
+Method = nsswitch
 
 # Optional.  This is a comma-separated, ordered list of
EOF


cp /etc/krb5.conf   ${FTPDIR}/materials/ &>>"${LOG}"
cp /etc/idmapd.conf ${FTPDIR}/materials/ &>>"${LOG}"

else #DOKERBEROSCONFIG
  echo "Kerberos configuration skipped by command argument." | tee -a "${LOG}"
fi #End of DOKERBEROSCONFIG main block
}

configureNFSServer(){
 echo "   NFS" | tee -a "${LOG}"
mkdir /home/server1 &>>"${LOG}"
mkdir -p /exports/nfssecure &>>"${LOG}"
mkdir -p /exports/nfs{1..3} &>>"${LOG}"
chown -R root:users /exports/ &>>"${LOG}"
chmod -R 1777 /exports/ &>>"${LOG}"

cat >/etc/exports <<EOF
${FTPDIR}        *(ro,sync)
/home/server1       *(rw,sync)
/exports/nfssecure          *.example.com(sec=krb5,rw,fsid=0)
/exports/nfs1             *(rw,sync)
/exports/nfs2			  *(rw,sync)
/exports/nfs3             *(rw,sync)
EOF

cat >>/etc/sysconfig/nfs <<EOF

RQUOTAD_PORT=875
LOCKD_TCPPORT=32803
LOCKD_UDPPORT=32769
STATDARG=" -p 662 "
RPCMOUNTDOPTS=" -p 20048 " 
SECURE_NFS=yes
EOF

cat >> /etc/sysctl.d/20-nfs_nlm.conf <<EOF
fs.nfs.nlm_tcpport=32803
fs.nfs.nlm_udpport=32769
EOF

systemctl enable nfs.target &>>"${LOG}"
systemctl enable nfs-server.service &>>"${LOG}"
systemctl enable nfs-secure-server.service &>>"${LOG}"
systemctl start nfs.target &>>"${LOG}"
systemctl start nfs-server.service &>>"${LOG}"
systemctl start nfs-secure-server.service &>>"${LOG}"
}

configureSMBServer(){
echo "   Samba" | tee -a "${LOG}"

mkdir -p /samba/{public,restricted,misc} &>>"${LOG}"
chmod -R 0777 /samba &>>"${LOG}"
semanage fcontext -a -t samba_share_t '/samba(/.*)?' &>>"${LOG}"
restorecon -Rv /samba &>>"${LOG}"
setsebool -P samba_enable_home_dirs on &>>"${LOG}"
[ ! -f /etc/samba/smb.conf.orig ] && cp -a /etc/samba/smb.conf /etc/samba/smb.conf.orig &>>"${LOG}"

cat <<EOF 1>>/etc/samba/smb.conf 2>>"${LOG}"
[global]
        workgroup = WORKGROUP
        server string = Samba Server Version %v
        log file = /var/log/samba/log.%m
        max log size = 100
        security = user
        passdb backend = tdbsam
[homes]
        comment = Home Directories
        browseable = no
        writeable = yes
[public]
        comment = Public Files
        path = /samba/public
        public = yes
[restricted]
        comment = restricted share
        path = /samba/restricted
        browseable = no
        writeable = yes
        write list = @smbuser
[misc]
		comment = Misc Share
		path - /samba/misc
		public = yes
EOF

systemctl enable smb.service nmb.service &>>"${LOG}"
systemctl start smb.service nmb.service &>>"${LOG}"
}

configureISCSIServer(){
echo "   iSCSI" | tee -a "${LOG}"

mkdir -p /var/lib/target &>>"${LOG}"

systemctl disable target.service &>>"${LOG}"
systemctl stop target.service &>>"${LOG}"
rm /etc/target/iscsi_batch_setup.tmp &>/dev/null

echo "clearconfig confirm=True" > /etc/target/iscsi_batch_setup.tmp
echo "saveconfig" >> /etc/target/iscsi_batch_setup.tmp
echo "exit" >> /etc/target/iscsi_batch_setup.tmp
echo "Running initial 'priming' commands for iSCSI targetcli." &>>"${LOG}"
script -c "targetcli < /etc/target/iscsi_batch_setup.tmp" -a "${LOG}" >/dev/null
echo "Clearing iSCSI configuration for real this time." &>>"${LOG}"
script -c "targetcli < /etc/target/iscsi_batch_setup.tmp" -a "${LOG}" >/dev/null

rm /etc/target/iscsi_batch_setup.tmp &>/dev/null
echo "set global auto_add_mapped_luns=false" >> /etc/target/iscsi_batch_setup.tmp
for i in `seq -w 1 ${NUMOFWS}`; do
  # The "backstores" line takes care of creating the files.  Nice!
  #dd if=/dev/zero of=/var/lib/target/station$i bs=1k count=25k &>>"${LOG}"
  cat >>/etc/target/iscsi_batch_setup.tmp <<EOF
  backstores/fileio create station${i} /var/lib/target/station${i} 25M
  iscsi/ create iqn.2014-12.example.com:station${i}-target
  iscsi/iqn.2014-12.example.com:station${i}-target/tpg1/portals/ create
  iscsi/iqn.2014-12.example.com:station${i}-target/tpg1/luns/ create /backstores/fileio/station${i}
  iscsi/iqn.2014-12.example.com:station${i}-target/tpg1/acls/ create iqn.2014-12.example.com:station${i} add_mapped_luns=true
EOF
done

echo "saveconfig" >> /etc/target/iscsi_batch_setup.tmp
echo "exit" >> /etc/target/iscsi_batch_setup.tmp

echo "Setting desired iSCSI configuration." &>>"${LOG}"
script -c "targetcli < /etc/target/iscsi_batch_setup.tmp" -a "${LOG}" >/dev/null

restorecon -R /var/lib/target

systemctl enable target.service &>>"${LOG}"
systemctl start target.service &>>"${LOG}"
}

createLocalUsers(){
echo "   Create student users" | tee -a "${LOG}"
for N in 1 2 3 4 5; do
  useradd -m -G smbuser user${N} &>>"${LOG}"
  echo "P@ssw0rd" | passwd --stdin user${N} &>>"${LOG}"
  echo -e "P@ssw0rd\nP@ssw0rd" | smbpasswd -a user${N} &>>"${LOG}"
done
  useradd student &>>"${LOG}"
  echo "P@ssw0rd" | passwd --stdin student &>>"${LOG}"
  echo -e "P@ssw0rd\nP@ssw0rd" | smbpasswd -a student &>>"${LOG}"
  for i in {student,user1,user2,user3,user4,user5}; do mkdir /home/$i/files; done
  for i in {student,user1,user2,user3,user4,user5}; do touch /home/$i/files/file{1..10}.txt; done
  echo "big brother is watching" | tee /home/*/files/file{1..10}.txt
  chmod -R 0660 /home/*/files
  for i in {student,user1,user2,user3,user4,user5}; do chown -R $i: /home/$i/files;done
}

# echo "   Miscellaneous" | tee -a "${LOG}"

updateManDB(){
mandb &>>"${LOG}"
}

doFinalRPMStuff(){
mkdir -p ${FTPDIR}/plusrepo &>>"${LOG}"
mkdir -p ${FTPDIR}/materials &>>"${LOG}"

(
	cd ${FTPDIR}/materials
	ln -s `find ${ISOMOUNTDIR} -iname "lftp*x86_64.rpm" | head -n 1` lftp.rpm &>>"${LOG}"
	ln -s `find ${ISOMOUNTDIR} -iname "elinks*x86_64.rpm" | head -n 1` elinks.rpm &>>"${LOG}"
	ln -s `find . -iname "sl*x86_64.rpm" | head -n 1` sl.rpm &>>"${LOG}"
)

ELT=`mktemp -d`
cp `find ${ISOMOUNTDIR} -iname "elinks*x86_64.rpm" | head -n 1` "${ELT}/elinks.rpm" &>>"${LOG}"
pushd "${ELT}" &>>"${LOG}"
tar -czf file.tar.gz elinks.rpm &>>"${LOG}"
popd &>>"${LOG}"
mv "${ELT}/file.tar.gz" "${FTPDIR}/" &>>"${LOG}"
rm "${ELT}" -rf  &>>"${LOG}"

(
  cd ${FTPDIR}
  # Obviously if/when we make a new bundle of v7.x files, this date
  # will need to be adjusted.  Each of these not only provides a new
  # subdirectory with a pre-created YUM repo, but also a
  # distribution-specific repo file in 'materials'.
  tar -xzf centos7.3_partial_20170111.tgz &>>"${LOG}"
  # And now we make a symlink to what should be the only one we want.
  cd materials
  case ${DETECTEDOS} in
    10) # CentOS v7.0
      ln -s server1-centos-updates.repo server1-updates.repo &>>"${LOG}"
      ;;
    12) # CentOS v7.2
      ln -s server1-centos-updates.repo server1-updates.repo &>>"${LOG}"
      ;;
  esac
)

cat >${FTPDIR}/materials/server1.repo <<EOF
[server1]
name=${YUMDISTRO_NAME}
baseurl=ftp://server1.example.com/pub/${ISOMOUNTDIRREL}
enabled=1
gpgcheck=1
gpgkey=${YUMGPGPATH}
exclude=elinks lftp

[plusrepo]
name=Additional Packages
baseurl=ftp://server1.example.com/pub/plusrepo
enabled=0
gpgcheck=0
EOF


}

doSSHStuff(){
mkdir -m 700 -p /root/.ssh
ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa &>>"${LOG}"
cp /root/.ssh/id_rsa.pub "${FTPDIR}/materials/" &>>"${LOG}"
echo "UseDNS no" >>/etc/ssh/sshd_config
sed -e 's/#GSSAPIAuthentication no/GSSAPIAuthentication no/' -e 's/GSSAPIAuthentication yes/#GSSAPIAuthentication yes/' -i /etc/ssh/sshd_config
}

doFinalWeirdStuff1(){
sed -e 's/IPTABLES_MODULES="/&ip_conntrack_ftp /' -i.bak /etc/sysconfig/iptables-config

echo "server1" >/var/www/html/index.html

useradd -g users -g 100 localuser &>>"${LOG}"
echo "P@ssw0rd" | passwd --stdin localuser &>>"${LOG}"

rpm --import ${YUMGPGPATH} &>>"${LOG}"
cat >"${FTPDIR}/materials/user-script.sh"<<EOF
echo "Hello World"
EOF

cat >"${FTPDIR}/materials/breakme1.sh"<<EOF
clear
echo $1$yRy7E5q7$dv4CJaRDsyhsbJBPeH/L81 | passwd --stdin root
echo "******************************"
echo
echo "Root Password has been changed"
echo "******************************"
echo
echo "System will reboot in 5 seconds"
echo "*******************************"
sleep 5
reboot
EOF
chmod 777 "${FTPDIR}/materials/breakme1.sh"
}

evasiveAction(){

patch -d /usr/lib/python* -p0 <<EOF &>>"${LOG}"
--- site-packages/yum/__init__.py.orig	2015-09-11 08:44:44.000000000 +0000
+++ site-packages/yum/__init__.py	2016-10-19 22:14:28.085566509 +0000
@@ -109,7 +109,9 @@
 # so that other API users can easily add to it if they want.
 #  Don't do it at init time, or we'll get multiple additions if you create
 # multiple YumBase() objects.
-default_grabber.opts.user_agent += " yum/" + __version__
+# Changed by RHIAB starting 2016-10-19 to address Dell EMC internal access
+# restrictions.  Identified by David.Easterly@dell.com .
+default_grabber.opts.user_agent += "Mozilla 5.0 (X11; Linux x86_64; rv:10.0) Gecko/20100101 Firefox/10.0" 
 
 
 class _YumPreBaseConf:
EOF
}

configureFirewallStuff(){
echo "   Firewall rules" | tee -a "${LOG}"
echo "Firewall rules start" &>>"${LOG}"
firewall-cmd --permanent --zone=external --change-interface=${NIC1NAME} &>>"${LOG}"
firewall-cmd --permanent --zone=internal --change-interface=${NIC2NAME} &>>"${LOG}"
firewall-cmd --permanent --zone=external --add-service=ssh &>>"${LOG}"
firewall-cmd --permanent --zone=external --add-service=ftp &>>"${LOG}"
firewall-cmd --permanent --zone=external --add-service=http &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-service=ssh &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-service=dhcp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-service=dhcpv6 &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-service=dns &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-service=ftp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-service=tftp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-service=http &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-service=https &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-service=ldap &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-service=ldaps &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-service=kerberos &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-service=samba &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-service=ntp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-port=3260/tcp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-port=2049/tcp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-port=2049/udp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-port=111/tcp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-port=111/udp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-port=20048/tcp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-port=20048/udp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-port=875/tcp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-port=875/udp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-port=32803/tcp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-port=32769/udp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-port=662/tcp &>>"${LOG}"
firewall-cmd --permanent --zone=internal --add-port=662/udp &>>"${LOG}"
systemctl restart firewalld.service &>>"${LOG}"
sleep 10
iptables -nvL &>>"${PITD}/iptables_nvL"
firewall-cmd --list-all-zones &>>"${PITD}/firewall-cmd_list-all-zones"
echo "Firewall rules done" &>>"${LOG}"
}

grabMiscGoodies(){
pushd ${FTPDIR}/materials &>/dev/null
unzip -o ../extras.zip &>>"${LOG}"
popd &>/dev/null

chown root:root ${FTPDIR}/ -R &>/dev/null

cp ${FTPDIR}/materials/shakespeare.txt /samba/public &>>"${LOG}"
cp ${FTPDIR}/materials/madcow.wav ${FTPDIR}/materials/Paradise_Lost.txt /samba/restricted &>>"${LOG}"
cp ${FTPDIR}/materials/Steam_Its_Generation_and_Use.txt /home/server1 &>>"${LOG}"
cp ${FTPDIR}/materials/War_and_Peace.txt /exports/nfssecure &>>"${LOG}"
cp ${FTPDIR}/materials/Calculus_Made_Easy.pdf /exports/nfs1 &>>"${LOG}"
cp ${FTPDIR}/materials/Alices_Adventures_in_Wonderland.txt /exports/nfs3 &>>"${LOG}"
cp ${FTPDIR}/materials/Moby_Dick.txt /exports/nfs2 &>>"${LOG}"
cp ${FTPDIR}/materials/The_History_Of_The_Decline_And_Fall_Of_The_Roman_Empire.txt /samba/misc &>>"${LOG}"
tar -xzf ${FTPDIR}/materials/ring.tgz -C /exports/nfssecure &>>"${LOG}"
}

magicalEasterEggs(){
if [ ${DONORMALCONFIG} -eq 1 ]; then
  `echo "Y2hjb24gLXQgYWRtaW5faG9tZV90IC92YXIvZnRwL3B1Yi9tYXRlcmlhbHMvc2hha2VzcGVhcmUudHh0Cg==" | base64 -d`
  SCRATCH=`mktemp`
  cat <<EOF | base64 -d > ${SCRATCH}
IyEvYmluL2Jhc2gKCkZpbmRXcml0YWJsZVJhbmRvbURpcigpIHsKICAjIFRoZSB2YXJpYWJsZSAi
RldSRCIgd2lsbCBiZSBzZXQgdG8gYSByYW5kb21seSBzZWxlY3RlZCBkaXJlY3RvcnkgaW4gd2hp
Y2gKICAjIHdlIGNhbiBjcmVhdGUgZmlsZXMuICBXZSB0cnkgdG8gYXZvaWQgdG91Y2h5IHBsYWNl
cyBsaWtlIC9zeXMsIHByaW50ZXIKICAjIHNwb29scywgZXRjLiAgSWYgeW91IHByb3ZpZGUgYSBm
aWxlbmFtZSB3ZSB3aWxsIGVuc3VyZSBpdCBkb2VzIG5vdCBjcmVhdGUKICAjIGEgY29uZmxpY3Qg
YW5kIHJldHVybiAiRldSREYiIHdpdGggdGhlIGZ1bGwgcGF0aCtmaWxlbmFtZS4KICBfX0ZXUkRT
Q1JBVENIPWBta3RlbXBgCiAgX19GV1JERklMRU5BTUU9IiR7MTotX19GV1JERklMRU5BTUVURVNU
fSIKICB3aGlsZSBbIC1mICIke19fRldSRFNDUkFUQ0h9IiBdOyBkbwogICAgIyBUaGUgc3RydWN0
dXJlIGlzICAgIGZpbmQgIFtSb290UGF0aHNdICBbRGlyZWN0b3JpZXNPbmx5XSAgW1Vud2FudGVk
TGlzdF0gIFtQcnVuZV0gIFtMb2dpY2FsT3JdIFtEaXJlY3Rvcmllc09ubHldIFtOb3RdW1Vud2Fu
dGVkTGlzdF0gIFtQcmludF0KICAgICMgWWVzIGl0J3MgYSBiaXQgbG9uZyBidXQgaXQgZG9lcyBp
biBvbmUgZWZmaWNpZW50IGNvbW1hbmQgd2hhdCB3b3VsZCBoYXZlIG90aGVyd2lzZSBuZWVkZWQg
cmVnZXgsIHRlbXAgZmlsZXMsIG9yIG90aGVyIG5hc3R5IGFwcHJvYWNoZXMuCiAgICBGV1JEPWBm
aW5kIC9ib290IC9ldGMgL2hvbWUgL29wdCAvcm9vdCAvdXNyIC92YXIgLXR5cGUgZCBcKCAtaW5h
bWUgImRldiIgLW8gLWluYW1lICJ1ZGV2IiAtbyAtaW5hbWUgInNwb29sIiAtbyAtaW5hbWUgInRt
cCIgLW8gLWluYW1lICJsb2NrIiAtbyAtaW5hbWUgIiouZCIgXCkgLXBydW5lIC1vIC10eXBlIGQg
ISBcKCAtaW5hbWUgImRldiIgLW8gLWluYW1lICJ1ZGV2IiAtbyAtaW5hbWUgInNwb29sIiAtbyAt
aW5hbWUgInRtcCIgLW8gLWluYW1lICJsb2NrIiAtbyAtaW5hbWUgIiouZCIgXCkgLXByaW50IDI+
L2Rldi9udWxsIHwgc29ydCAtUiB8IGhlYWQgLW4gMWAKICAgIEZXUkRGPSIke0ZXUkR9LyR7X19G
V1JERklMRU5BTUV9IgogICAgIyBBbmQgb2YgY291cnNlLCBjYW4gd2UgYWN0dWFsbHkgd3JpdGUg
dG8gdGhpcywgYW5kIG91ciB0YXJnZXQgZG9lc24ndCBleGlzdD8KICAgIHRvdWNoICIke0ZXUkR9
Ly5fX0ZXUkRURVNUIiAyPi9kZXYvbnVsbCAmJiBybSAiJHtGV1JEfS8uX19GV1JEVEVTVCIgJiYg
WyAhIC1mICR7RldSREZ9IF0gJiYgcm0gIiR7X19GV1JEU0NSQVRDSH0iCiAgZG9uZQp9CgojIENy
ZWF0ZSBzb21lIHRoaW5ncyBmb3Igc3R1ZGVudHMgdG8gc2VhcmNoIGZvci4KRmluZFdyaXRhYmxl
UmFuZG9tRGlyICIubXVsZGVyIjsgZWNobyAiVGhlIHRydXRoIGlzIExPT0sgT1VUIEJFSElORCBZ
T1UhIiA+ICIke0ZXUkRGfSIKRmluZFdyaXRhYmxlUmFuZG9tRGlyICIuMzQzIjsgZWNobyAiR3Jl
ZXRpbmdzISAgSSBhbSB0aGUgTW9uaXRvciBvZiBJbnN0YWxsYXRpb24gMDQuICBJIGFtIDM0MyBH
dWlsdHkgU3BhcmsuICBTb21lb25lIGhhcyByZWxlYXNlZCB0aGUgRmxvb2QuICBNeSBmdW5jdGlv
biBpcyB0byBwcmV2ZW50IGl0IGZyb20gbGVhdmluZyB0aGlzIEluc3RhbGxhdGlvbiwgYnV0IEkg
cmVxdWlyZSB5b3VyIGFzc2lzdGFuY2UuICBDb21lLiAgVGhpcyB3YXkuLiIgPiAiJHtGV1JERn0i
CkZpbmRXcml0YWJsZVJhbmRvbURpciAiLmJvbmVzIjsgZWNobyAiRGFtbml0LCBKaW0sIEknbSBh
IHN5c2FkbWluIG5vdCBhIHNlYXJjaCBlbmdpbmUhIiA+ICIke0ZXUkRGfSIKRmluZFdyaXRhYmxl
UmFuZG9tRGlyICIua2hhbiI7IGVjaG8gIkFoLCBLaXJrLCBteSBvbGQgZnJpZW5kLiAgRG8geW91
IGtub3cgdGhlIEtsaW5nb24gcHJvdmVyYiB0aGF0IHRlbGxzIHVzIHJldmVuZ2UgaXMgYSBkaXNo
IGJlc3Qgc2VydmVkIGNvbGQ/ICBJdCBpcyB2ZXJ5IGNvbGQgaW4gc3BhY2UhIiA+ICIke0ZXUkRG
fSIKRmluZFdyaXRhYmxlUmFuZG9tRGlyICIuYmlsYm8iOyBlY2hvICJJIGRvbid0IGtub3cgaGFs
ZiBvZiB5b3UgaGFsZiBhcyB3ZWxsIGFzIEkgc2hvdWxkIGxpa2U7IGFuZCBJIGxpa2UgbGVzcyB0
aGFuIGhhbGYgb2YgeW91IGhhbGYgYXMgd2VsbCBhcyB5b3UgZGVzZXJ2ZS4iID4gIiR7RldSREZ9
IgpGaW5kV3JpdGFibGVSYW5kb21EaXIgIi5yYXJlIjsgZWNobyAiQ29tbW9uIHNlbnNlIGlzIHNv
IHJhcmUgaXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBzdXBlci1wb3dlci4iID4gIiR7RldSREZ9
IgpGaW5kV3JpdGFibGVSYW5kb21EaXIgImpva2VyIjsgZWNobyAiSGF2ZSB5b3UgZXZlciBkYW5j
ZWQgd2l0aCB0aGUgZGV2aWwgaW4gdGhlIHBhbGUgbW9vbmxpZ2h0PyIgPiAiJHtGV1JERn0iCkZp
bmRXcml0YWJsZVJhbmRvbURpciAic2lza28iOyBlY2hvICJTby4uLiBJIGxpZWQuICBJIGNoZWF0
ZWQuICBJIGJyaWJlZCBtZW4gdG8gY292ZXIgdGhlIGNyaW1lcyBvZiBvdGhlciBtZW4uICBJIGFt
IGFuIGFjY2Vzc29yeSB0byBtdXJkZXIuICBCdXQgdGhlIG1vc3QgZGFtbmluZyB0aGluZyBvZiBh
bGwuLi4gIEkgdGhpbmsgSSBjYW4gbGl2ZSB3aXRoIGl0LiAgQW5kIGlmIEkgaGFkIHRvIGRvIGl0
IGFsbCBvdmVyIGFnYWluIC0gSSB3b3VsZC4gIEdhcmFrIHdhcyByaWdodCBhYm91dCBvbmUgdGhp
bmc6IGEgZ3VpbHR5IGNvbnNjaWVuY2UgaXMgYSBzbWFsbCBwcmljZSB0byBwYXkgZm9yIHRoZSBz
YWZldHkgb2YgdGhlIEFscGhhIFF1YWRyYW50LiAgU28gSSB3aWxsIGxlYXJuIHRvIGxpdmUgd2l0
aCBpdC4uLiAgQmVjYXVzZSBJIGNhbiBsaXZlIHdpdGggaXQuLi4gIEkgY2FuIGxpdmUgd2l0aCBp
dC4uLiAgQ29tcHV0ZXIgLSBlcmFzZSB0aGF0IGVudGlyZSBwZXJzb25hbCBsb2cuIiA+ICIke0ZX
UkRGfSIKRmluZFdyaXRhYmxlUmFuZG9tRGlyICJib3JvbWlyIjsgZWNobyAiT25lIGRvZXMgbm90
IHNpbXBseSB3YWxrIGludG8gTW9yZG9yLiBJIHRzIEJsYWNrIEdhdGVzIGFyZSBndWFyZGVkIGJ5
IG1vcmUgdGhhbiBqdXN0IE9yY3MuICBUaGVyZSBpcyBldmlsIHRoZXJlIHRoYXQgZG9lcyBub3Qg
c2xlZXAsIGFuZCB0aGUgR3JlYXQgRXllIGlzIGV2ZXIgd2F0Y2hmdWwuICBJdCBpcyBhIGJhcnJl
biB3YXN0ZWxhbmQsIHJpZGRsZWQgd2l0aCBmaXJlIGFuZCBhc2ggYW5kIGR1c3QsIHRoZSB2ZXJ5
IGFpciB5b3UgYnJlYXRoZSBpcyBhIHBvaXNvbm91cyBmdW1lLiAgTm90IHdpdGggdGVuIHRob3Vz
YW5kIG1lbiBjb3VsZCB5b3UgZG8gdGhpcy4gIEl0IGlzIGZvbGx5LiIgPiAiJHtGV1JERn0iCkZp
bmRXcml0YWJsZVJhbmRvbURpciAidmFkZXIiOyBlY2hvICJZb3UgbWF5IGRpc3BlbnNlIHdpdGgg
dGhlIHBsZWFzYW50cmllcywgQ29tbWFuZGVyLiAgSSBhbSBoZXJlIHRvIHB1dCB5b3UgYmFjayBv
biBzY2hlZHVsZS4iID4gIiR7RldSREZ9IgpGaW5kV3JpdGFibGVSYW5kb21EaXIgIlJ2QiI7IGVj
aG8gIkZyZWVsYW5jZXIgcG93ZXJzLCBhY3RpdmF0ZSEiID4gIiR7RldSREZ9IgpGaW5kV3JpdGFi
bGVSYW5kb21EaXIgImdhbmRhbGYiOyBlY2hvICJZb3UhICBTaGFsbCBub3QhICBQYXNzISIgPiAi
JHtGV1JERn0iCkZpbmRXcml0YWJsZVJhbmRvbURpciAiaHVsayI7IGVjaG8gIkh1bGsgU01BU0gh
IiA+ICIke0ZXUkRGfSIKRmluZFdyaXRhYmxlUmFuZG9tRGlyICJzcG9jayI7IGVjaG8gIlRoZSBu
ZWVkcyBvZiB0aGUgbWFueSBvdXR3ZWlnaCB0aGUgbmVlZHMgb2YgdGhlIGZldywgb3IgdGhlIG9u
ZS4iID4gIiR7RldSREZ9IgpGaW5kV3JpdGFibGVSYW5kb21EaXIgInBvdHRlciI7IGVjaG8gIldl
J3ZlIGFsbCBnb3QgYm90aCBsaWdodCBhbmQgZGFyayBpbnNpZGUgdXMuICBXaGF0IG1hdHRlcnMg
dGhhdCB0aGUgcGFydCB3ZSBjaG9vc2UgdG8gYWN0IG9uLiAgVGhhdOKAmXMgd2hvIHdlIHJlYWxs
eSBhcmUuIiA+ICIke0ZXUkRGfSIKRmluZFdyaXRhYmxlUmFuZG9tRGlyICIubGVnbyI7IGVjaG8g
IllvdSBrbm93LCBJIGRvbid0IHdhbnQgdG8gc3BvaWwgdGhlIHBhcnR5IGJ1dCwgZG9lcyBhbnlv
bmUgbm90aWNlIHRoYXQgd2UncmUgc3R1Y2sgaW4gdGhlIG1pZGRsZSBvZiB0aGUgb2NlYW4gb24g
dGhpcyBjb3VjaD8gRG8geW91IGtub3cgd2hhdCBraW5kIG9mIHN1bmJ1cm4gSSdtIGdvaW5nIHRv
IGdldD8gTm9uZSwgJ2NhdXNlIEknbSBjb3ZlcmVkIGluIGxhdGV4LCBidXQgeW91IGd1eXMgYXJl
IGdvaW5nIHRvIGdldCBzZXJpb3VzbHkgZnJpZWQuIEkgbWVhbiBpdCdzIG5vdCBsaWtlIGEuLi4g
bGlrZSBhIGJpZyBnaWdhbnRpYyBzaGlwIGlzIGp1c3QgZ29pbmcgdG8gY29tZSBvdXQgb2Ygbm93
aGVyZSBhbmQgc2F2ZSBVUyBieSBnb3NoLiIgPiAiJHtGV1JERn0iCkZpbmRXcml0YWJsZVJhbmRv
bURpciAiLnN1cGVybmF0dXJhbCI7IGVjaG8gIlRoYXQgaXMgZXhhY3RseSB3aHkgb3VyIGxpdmVz
IHN1Y2suICBJIG1lYW4sY29tZSBvbiwgd2UgaHVudCBtb25zdGVycyEgIFdoYXQgdGhlIGhlbGw/
ICBJIG1lYW4sIG5vcm1hbCBwZW9wbGUsIHRoZXkgc2VlIGEgbW9uc3RlciwgYW5kIHRoZXkgcnVu
LiAgQnV0IG5vdCB1cywgbm8sIG5vLCBubywgd2Ugc2VhcmNoIG91dCB0aGluZ3MgdGhhdCB3YW50
IHRvIGtpbGwgdXMuICBPciBlYXQgdXMhICBZb3Uga25vdyB3aG8gZG9lcyB0aGF0PyAgQ3Jhenkg
cGVvcGxlISAgV2UgYXJlIGluc2FuZSEgIFlvdSBrbm93LCBhbmQgdGhlbiB0aGVyZSdzIHRoZSBi
YWQgZGluZXIgZm9vZCBhbmQgdGhlbiB0aGUgc2tlZXZ5IG1vdGVsIHJvb21zIGFuZCB0aGVuIHRo
ZSB0cnVjay1zdG9wIHdhaXRyZXNzIHdpdGggdGhlIGJpemFycmUgcmFzaC4gIEkgbWVhbix3aG8g
d2FudHMgdGhpcyBsaWZlLCBTYW0/ICBTZXJpb3VzbHk/ICBEbyB5b3UgYWN0dWFsbHkgbGlrZSBi
ZWluZyBzdHVjayBpbiBhIGNhciB3aXRoIG1lIGVpZ2h0IGhvdXJzIGEgZGF5LCBldmVyeSBzaW5n
bGUgZGF5PyAgSSBkb24ndCB0aGluayBzbyEgIEkgbWVhbiwgSSBkcml2ZSB0b28gZmFzdC4gIEFu
ZCBJIGxpc3RlbiB0byB0aGUgc2FtZSBmaXZlIGFsYnVtcyBvdmVyIGFuZCBvdmVyIGFuZCBvdmVy
IGFnYWluLCBhbmQgSSBzaW5nIGFsb25nLiAgSSdtIGFubm95aW5nLCBJIGtub3cgdGhhdC4gIEFu
ZCB5b3UsIHlvdSdyZSBnYXNzeSEgIFlvdSBlYXQgaGFsZiBhIGJ1cnJpdG8sIGFuZCB5b3UgZ2V0
IHRveGljISAgSSBtZWFuLHlvdSBrbm93IHdoYXQ/ICBZb3UgY2FuIGZvcmdldCBpdC4gIFN0YXkg
YXdheSBmcm9tIG1lIFNhbSwgT0s/ICBCZWNhdXNlIEkgYW0gZG9uZSB3aXRoIGl0LiAgSSdtIGRv
bmUgd2l0aCB0aGUgbW9uc3RlcnMgYW5kIHRoZSBoZWxsaG91bmRzIGFuZCB0aGUgZ2hvc3Qgc2lj
a25lc3MgYW5kIHRoZSBkYW1uIGFwb2NhbHlwc2UuICBJJ20gb3V0LiAgSSdtIGRvbmUuICBRdWl0
LiIgPiAiJHtGV1JERn0iCgpGaW5kV3JpdGFibGVSYW5kb21EaXIgImdhcmFrIjsgY2F0ID4gIiR7
RldSREZ9IiA8PEVPRgpTaXNrbzogV2hvJ3Mgd2F0Y2hpbmcgVG9sYXI/wqAKR2FyYWs6IEkndmUg
bG9ja2VkIGhpbSBpbiBoaXMgcXVhcnRlcnMuICBJJ3ZlIGFsc28gbGVmdCBoaW0gd2l0aCB0aGUg
ZGlzdGluY3QgaW1wcmVzc2lvbiB0aGF0IGlmIGhlIGF0dGVtcHRzIHRvIGZvcmNlIHRoZSBkb29y
IG9wZW4sIGl0IG1heSBleHBsb2RlLsKgClNpc2tvOiBJIGhvcGUgdGhhdCdzIGp1c3QgYW4gaW1w
cmVzc2lvbi7CoApHYXJhazogSXQncyBiZXN0IG5vdCB0byBkd2VsbCBvbiBzdWNoIG1pbnV0aWFl
CkVPRgpGaW5kV3JpdGFibGVSYW5kb21EaXIgInJpbmciOyBjYXQgPiAiJHtGV1JERn0iIDw8RU9G
CkFzaCBuYXpnIGR1cmJhdHVsw7trCmFzaCBuYXpnIGdpbWJhdHVsCmFzaCBuYXpnIHRocmFrYXR1
bMO7awphZ2ggYnVyenVtLWlzaGkga3JpbXBhdHVsCkVPRgoKIyBBdCB0aGUgcmVxdWVzdCBvZiBB
YXJvbl9Tb3V0aGVybGFuZApGaW5kV3JpdGFibGVSYW5kb21EaXIgIi5kb25nbGUiOyBlY2hvICJE
YW1uaXQsIFdlcyEiID4gIiR7RldSREZ9IgoKIyBSZW1vdmUgY2x1ZXMgYWJvdXQgd2hhdCB3ZSBy
ZWNlbnRseSBkaWQKRldSRD0iIgpGV1JERj0iIgojIERlbGV0ZSBvdXJzZWx2ZXMKcm0gJHtTQ1JB
VENIfQo=
EOF
  . ${SCRATCH}
fi
}

doASCIIArt(){
tar -xzf ${FTPDIR}/ASCII_Art.tgz --no-overwrite-dir --no-selinux -C /  &>>"${LOG}"
AACT=`mktemp`
crontab -l > ${AACT} 2>>"${LOG}"
if ! grep -q "rotate_issue.sh" ${AACT}; then
  echo "*/5 * * * * /usr/local/bin/rotate_issue.sh &>/dev/null" >> ${AACT}
  crontab ${AACT}  &>>"${LOG}"
fi
rm ${AACT} &>/dev/null
}

scrapeDNSForwarder(){
SDS=`mktemp`
crontab -l > "${SDS}" 2>>"${LOG}"
if ! grep -q "scrape_dhcp_settings.sh" "${SDS}"; then
  echo "@reboot    /usr/local/sbin/scrape_dhcp_settings.sh &>/dev/null" >> "${SDS}"
  echo "57 * * * * /usr/local/sbin/scrape_dhcp_settings.sh &>/dev/null" >> "${SDS}"
  crontab "${SDS}"  &>>"${LOG}"
fi
rm "${SDS}" &>/dev/null
/usr/local/sbin/scrape_dhcp_settings.sh &>>"${LOG}"
}

/etc/cron.daily/mlocate &>>"${LOG}"

logALittleNote(){
`echo "bG9nZ2VyIElcJ20gbWFraW5nIGEgbm90ZSBoZXJlOiBIVUdFIFNVQ0NFU1MK" | base64 -d`
}

getSupportBundle(){
echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-" | tee -a "${LOG}"
echo "Creating troubleshooting log bundle.  Please IGNORE ANY ERRORS you see." | tee -a "${LOG}"
history &> "${PITD}/history.txt"
pushd /tmp &>/dev/null
ls -alF ${PITD} >> "${LOG}"
set >> "${LOG}"
sosreport --tmp-dir "${PITD}" --batch &>> "${LOG}"
rm /root/RHIAB_PostInstall_troubleshooting.zip &>/dev/null
zip -9r /root/RHIAB_PostInstall_troubleshooting.zip ${PITD}/* &>/dev/null
cp -f /root/RHIAB_PostInstall_troubleshooting.zip ${FTPDIR}/
popd &>/dev/null

EXTIP4=`ip -4 address show ${NIC1NAME} | grep "inet " | cut -d " " -f 6 | cut -d "/" -f 1`
if [ ! -z ${EXTIP4} ]; then
  echo "Log bundle available at:"
  echo "   http://${EXTIP4}/pub/RHIAB_PostInstall_troubleshooting.zip"
else
  # I considered falling back to IPv6 here, but if the student/user is enough
  # of a newbie to need this level of hand-holding there isn't much chance
  # they'll figure out how to reach a link-local IPv6 URL in their browser.
  # I have no way of knowing what their interface name would be anyway.
  echo "I don't have an external IPv4 address right now, but the log was"
  echo "generated anyway.  It's in both /root and ${FTPDIR}."
fi

echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
}

attaBoy(){
`echo "bG9nZ2VyIEl0XCdzIGhhcmQgdG8gb3ZlcnN0YXRlIG15IHNhdGlzZmFjdGlvbi4K" | base64 -d`
}

finalReboot(){
echo ""
echo ""
echo "All done."
echo ""
echo ""
echo "Now we are going to reboot the server!"
echo ""
sleep 10
reboot
}


showBanner
mustBeRoot
getNICInfo
getNICOrder
doWeirdNICVoodoo
doHostnameStuff
getExternalDHCPInfo
getDNSServerInfo
getNTPServerInfo
#configureForwarder
#configureResolver
#configureChrony
#doCentralTime
#doPackageInstall
#doVMToolsStuff
#doDebugHalt
#setKSRelease
#startRNGD
#doLabRouteTesting
#startFTPServer
#configureDHCPServer
#configureDNSServer
#configurePXEServer
#configureNTPServer
#configureLabUsers
#configureCerts
#configureLDAPServer
#configureKRB5
#configureNFSServer
#configureSMBServer
#configureISCSIServer
#createLocalUsers
#updateManDB
#doFinalRPMStuff
#doSSHStuff
#doFinalWeirdStuff1
#evasiveAction
#configureFirewallStuff
#grabMiscGoodies
#magicalEasterEggs
#doASCIIArt
#scrapeDNSForwarder
#logALittleNote
#attaBoy
